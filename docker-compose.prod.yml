services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    env_file: .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U knokfm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Queue
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    env_file: .env.prod
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Discord Bot Service
  bot:
    build:
      context: .
      dockerfile: Dockerfile.bot
    restart: unless-stopped
    env_file: .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Background Worker Service
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    restart: unless-stopped
    env_file: .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    restart: unless-stopped
    env_file: .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    expose:
      - "8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    restart: unless-stopped
    networks:
      - frontend
    expose:
      - "80"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database Seeder (run manually with: docker compose run --rm seeder -channel X -guild Y)
  seeder:
    build:
      context: .
      dockerfile: Dockerfile.seeder
    env_file: .env.prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    profiles:
      - tools

  # Caddy Reverse Proxy (auto-SSL)
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - frontend
      - backend
    depends_on:
      - api
      - web
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:

networks:
  frontend:
  backend:
